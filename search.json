[{"title":"Hello World","url":"/2025/06/07/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n"},{"title":"汉明距离","url":"/2025/06/07/%E6%B1%89%E6%98%8E%E8%B7%9D%E7%A6%BB/","content":"\n\n位运算基础题\n\n\n1. java支持的位运算：&amp;：按位与。 同1为1，否则为0|：按位或。 只要有一个为1，就是1~：按位非。 取反^：按位异或。 相同为0，不同为1&lt;&lt;：左位移运算符。&gt;&gt; ：右位移运算符。&lt;&lt;&lt;：无符号右移运算符。\n\n2. 工具函数lowbit函数\nint lowbit(int x) &#123; \treturn x &amp; -x; &#125;\n\n​​输入​​：任意整数 x（正、负均可）。\n​​输出​​：x 的二进制表示中​​最低位的 1 及其后所有 0​​组成的数。\n\n应用场景：1. 统计二进制中 1 的个数​**​通过循环减去 lowbit(x) 直到 x 为 0，统计操作次数即为 1 的个数：\npublic int hammingDistance(int x, int y) &#123;\tint ans = 0;\tint tmp = x ^ y;\twhile (tmp &gt; 0) &#123;\t\ttmp -= lowbit(tmp);\t\tans ++;\t&#125;\treturn ans;&#125;private int lowbit(int x) &#123;\treturn x &amp; -x;&#125;\n2. ​​树状数组（Fenwick Tree）​​\nlowbit 用于快速定位树状数组中需要更新或查询的节点。例如：\n​​单点更新​​：从当前位置 i 开始，不断加上 lowbit(i)，直到超出数组范围。\n​​前缀和查询​​：从当前位置 i 开始，不断减去 lowbit(i)，累加对应节点的值。\n\n3. 其他应用​**​\n​​判断 2 的幂​​：若 lowbit(x) == x，则 x 是 2 的幂（如 x=8 的二进制为 1000）。\n​​区间合并与离散化​​：在算法题中用于快速处理区间边界（如 AcWing 802. 区间和问题）。\n\nwhile ((x | y) !&#x3D; 0) 作用class Solution &#123;    public int hammingDistance(int x, int y) &#123;        int ans = 0;        while ((x | y) != 0) &#123;            int a = x &amp; 1, b = y &amp; 1;            ans += a ^ b;            x &gt;&gt;= 1; y &gt;&gt;= 1;        &#125;        return ans;    &#125;&#125;\n\nwhile ((x | y) != 0) 的作用:确保循环处理 x 和 y 的​​所有二进制位​​，直到所有位都被右移出（即 x 和 y 均变为 0）。\n按位或运算的特性​​\n\n​​x | y​​ 会对 x 和 y 的每一位执行逻辑或操作：\n若 x 或 y 的某一位为 1，结果的该位为 1。\n仅当 x 和 y 的所有位均为 0 时，结果才为 0。\n\n\n​​循环终止条件​​：当 x 和 y 的所有位均处理完毕（即均为 0）时，循环结束。\n\n"},{"title":"hexo博客新增和部署命令","url":"/2025/06/07/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/","content":"hexo c == hexo clean      # 清除缓存  hexo g == hexo generate   # 生成静态文件hexo d == hexo deploy     # 部署到github中，更新网页端的内容hexo s == hexo server     # 通过启动本地服务器，预览文章效果hexo n == hexo new  \n"}]
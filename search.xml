<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>hexo博客新增和部署命令</title>
    <url>/2025/06/07/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo c == hexo clean      # 清除缓存  </span><br><span class="line">hexo g == hexo generate   # 生成静态文件</span><br><span class="line">hexo d == hexo deploy     # 部署到github中，更新网页端的内容</span><br><span class="line">hexo s == hexo server     # 通过启动本地服务器，预览文章效果</span><br><span class="line">hexo n == hexo new  </span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>dp-分割等和子集</title>
    <url>/2025/06/08/%E5%88%86%E5%89%B2%E7%AD%89%E5%92%8C%E5%AD%90%E9%9B%86/</url>
    <content><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">给你一个 **只包含正整数** 的 **非空** 数组 `nums` 。请你判断是否可以将这个数组分割成两个子集，使得两个子集的元素和相等。</span><br><span class="line"></span><br><span class="line">**示例 1：**</span><br><span class="line">输入：nums = [1,5,11,5]</span><br><span class="line">输出：true</span><br><span class="line">解释：数组可以分割成 [1, 5, 5] 和 [11] 。</span><br><span class="line"></span><br><span class="line">**示例 2：**</span><br><span class="line">输入：nums = [1,2,3,5]</span><br><span class="line">输出：false</span><br><span class="line">解释：数组不能分割成两个元素和相等的子集。</span><br></pre></td></tr></table></figure>

<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>0-1背包问题<br>回溯 -&gt; 带返回值的回溯 -&gt; 记忆化数组 -&gt; dp<br>遍历数组nums，对每个元素都有两个选择：选或不选<br>转移方程： <code>dp[i][j] = dp[i - 1][j] + dp[i - 1][j - nums[i]]</code></p>
<p>不带返回值的回溯</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">found</span> <span class="operator">=</span> <span class="literal">false</span>; <span class="comment">// 成员变量记录是否找到解</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canPartition</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="literal">null</span> || nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            sum += num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (sum % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">target</span> <span class="operator">=</span> sum / <span class="number">2</span>;</span><br><span class="line">        backtrack(nums, target, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> found;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backtrack</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target, <span class="type">int</span> start)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (found) <span class="keyword">return</span>; <span class="comment">// 提前终止，如果已经找到解</span></span><br><span class="line">        <span class="keyword">if</span> (target == <span class="number">0</span>) &#123;</span><br><span class="line">            found = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (target &lt; <span class="number">0</span> || start &gt;= nums.length) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 选择当前数字</span></span><br><span class="line">        backtrack(nums, target - nums[start], start + <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 不选择当前数字</span></span><br><span class="line">        backtrack(nums, target, start + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>带返回值的回溯</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canPartition</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="literal">null</span> || nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            sum += num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (sum % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">target</span> <span class="operator">=</span> sum / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> backtrack(nums, target, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">backtrack</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target, <span class="type">int</span> start)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (target == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (target &lt; <span class="number">0</span> || start &gt;= nums.length) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 当前数字的两个选择：选 或 不选</span></span><br><span class="line">        <span class="keyword">return</span> backtrack(nums, target, start + <span class="number">1</span>) || backtrack(nums, target - nums[start], start + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>记忆化数组<br>上述回溯算法会超时。所以加入记忆化数组优化<br>记忆化数组的定义要能唯一的确定一个状态</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canPartition</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="literal">null</span> || nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            sum += num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (sum % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">target</span> <span class="operator">=</span> sum / <span class="number">2</span>;</span><br><span class="line">        Boolean[][] memo = <span class="keyword">new</span> <span class="title class_">Boolean</span>[nums.length + <span class="number">1</span>][target + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> backtrack(nums, target, <span class="number">0</span>, memo);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">backtrack</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target, <span class="type">int</span> start, Boolean[][] memo)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (target == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (target &lt; <span class="number">0</span> || start &gt;= nums.length) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (memo[start][target] != <span class="literal">null</span>) <span class="keyword">return</span> memo[start][target];</span><br><span class="line">        memo[start][target] = backtrack(nums, target, start + <span class="number">1</span>, memo) || backtrack(nums, target - nums[start], start + <span class="number">1</span>, memo);</span><br><span class="line">        <span class="keyword">return</span> memo[start][target];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>dp</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canPartition</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="literal">null</span> || nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            sum += num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (sum % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">target</span> <span class="operator">=</span> sum / <span class="number">2</span>;</span><br><span class="line">        <span class="type">boolean</span>[][] dp = <span class="keyword">new</span> <span class="title class_">boolean</span>[len + <span class="number">1</span>][target + <span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= len; i ++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt;= target; j ++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (j &gt;= nums[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j] || dp[i - <span class="number">1</span>][j - nums[i - <span class="number">1</span>]];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;    </span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[len][target];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>算法</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>post</title>
    <url>/2025/06/08/%E6%9C%80%E5%90%8E%E4%B8%80%E5%9D%97%E7%9F%B3%E5%A4%B4%E7%9A%84%E9%87%8D%E9%87%8F2/</url>
    <content><![CDATA[<p>我们需要将石头分成两堆，使得两堆石头的重量差最小。这可以转化为 ​<strong>​0&#x2F;1背包问题​</strong>​，即找到一个子集，使得其和尽可能接近 <code>总重量 / 2</code>。</p>
<h3 id="1-暴力解法-超时"><a href="#1-暴力解法-超时" class="headerlink" title="1. 暴力解法(超时)"></a>1. 暴力解法(超时)</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lastStoneWeightII</span><span class="params">(<span class="type">int</span>[] stones)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (stones == <span class="literal">null</span> || stones.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> stone: stones) &#123;</span><br><span class="line">            sum += stone;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> stones.length;</span><br><span class="line">        backtrack(stones, sum, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> min;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backtrack</span><span class="params">(<span class="type">int</span>[] stone, <span class="type">int</span> sum, <span class="type">int</span> currentSum, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= stone.length) &#123;</span><br><span class="line">	        <span class="comment">// 记录两部分子数组 之差 的最小值</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">otherSum</span> <span class="operator">=</span> sum - currentSum;</span><br><span class="line">            min = Math.min(min, Math.abs(otherSum - currentSum));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">		<span class="comment">// 两个选择：选index处的元素，或者不选</span></span><br><span class="line">        backtrack(stone, sum, currentSum + stone[index], index + <span class="number">1</span>);</span><br><span class="line">        backtrack(stone, sum, currentSum, index + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-带返回值的回溯，-向记忆化数组和dp的形式靠近"><a href="#2-带返回值的回溯，-向记忆化数组和dp的形式靠近" class="headerlink" title="2. 带返回值的回溯， 向记忆化数组和dp的形式靠近"></a>2. 带返回值的回溯， 向记忆化数组和dp的形式靠近</h3><h4 id="从index-0-递归"><a href="#从index-0-递归" class="headerlink" title="从index &#x3D; 0 递归"></a>从index &#x3D; 0 递归</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">	<span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">// int min = Integer.MAX_VALUE;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lastStoneWeightII</span><span class="params">(<span class="type">int</span>[] stones)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (stones == <span class="literal">null</span> || stones.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> stone: stones) &#123;</span><br><span class="line">            sum += stone;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// **从0开始递归**</span></span><br><span class="line">        <span class="keyword">return</span> backtrack(stones, sum, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 前index数组，分为两个子序列，返回这两个子序列之差的最小值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">backtrack</span><span class="params">(<span class="type">int</span>[] stone, <span class="type">int</span> sum, <span class="type">int</span> currentSum, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="comment">// 递归结束条件</span></span><br><span class="line">        <span class="comment">// 返回index结尾的子数组 分为的两个子序列之差</span></span><br><span class="line">        <span class="keyword">if</span> (index &gt;= stone.length) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">otherSum</span> <span class="operator">=</span> sum - currentSum;</span><br><span class="line">            <span class="keyword">return</span> Math.abs(otherSum - currentSum);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 递，两条路径，选择index，或不选择index</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">include</span> <span class="operator">=</span> backtrack(stone, sum, currentSum + stone[index], index + <span class="number">1</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">exclude</span> <span class="operator">=</span> backtrack(stone, sum, currentSum, index + <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 归，返回选择index 和不选择 index 的最小值</span></span><br><span class="line">        <span class="keyword">return</span> Math.min(include, exclude);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="从index-length-1开始递归"><a href="#从index-length-1开始递归" class="headerlink" title="从index &#x3D; length - 1开始递归"></a>从index &#x3D; length - 1开始递归</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">// int min = Integer.MAX_VALUE;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lastStoneWeightII</span><span class="params">(<span class="type">int</span>[] stones)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (stones == <span class="literal">null</span> || stones.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> stone: stones) &#123;</span><br><span class="line">            sum += stone;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// **从length - 1 开始往下递归**</span></span><br><span class="line">        <span class="keyword">return</span> backtrack(stones, sum, <span class="number">0</span>, stones.length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 前index数组，分为两个子序列，返回这两个子序列之差的最小值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">backtrack</span><span class="params">(<span class="type">int</span>[] stone, <span class="type">int</span> sum, <span class="type">int</span> currentSum, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="comment">// 递归结束条件</span></span><br><span class="line">        <span class="comment">// 返回index结尾的子数组 分为的两个子序列之差</span></span><br><span class="line">        <span class="keyword">if</span> (index == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">otherSum</span> <span class="operator">=</span> sum - currentSum;</span><br><span class="line">            <span class="keyword">return</span> Math.abs(otherSum - currentSum);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 递，两条路径，选择index，或不选择index</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">include</span> <span class="operator">=</span> backtrack(stone, sum, currentSum + stone[index], index - <span class="number">1</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">exclude</span> <span class="operator">=</span> backtrack(stone, sum, currentSum, index - <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 归，返回选择index 和不选择 index 的最小值</span></span><br><span class="line">        <span class="keyword">return</span> Math.min(include, exclude);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-记忆化数组"><a href="#3-记忆化数组" class="headerlink" title="3. 记忆化数组"></a>3. 记忆化数组</h3><ul>
<li>注意：memo要定义成一个二维数组，而不能定义成<code>int[] memo = new int[len + 1];</code> 因为index不能唯一的确定一种状态，只有<ul>
<li>index：确定当前已经递归到哪个元素</li>
<li>currentSum：index之前的元素选择情况<br>  才能唯一的确定一种状态。</li>
</ul>
</li>
<li>可以看出，此时memo数组和dp的形式已经很像了，<code>memo[i][j]</code>表示的是以i结尾的子数组，分为两个子序列，这两个子序列差值的最小值</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">// int min = Integer.MAX_VALUE;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lastStoneWeightII</span><span class="params">(<span class="type">int</span>[] stones)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (stones == <span class="literal">null</span> || stones.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> stone: stones) &#123;</span><br><span class="line">            sum += stone;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> stones.length;</span><br><span class="line">        <span class="type">int</span>[][] memo = <span class="keyword">new</span> <span class="title class_">int</span>[len + <span class="number">1</span>][sum + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; memo.length; i ++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; memo[<span class="number">0</span>].length; j ++) &#123;</span><br><span class="line">                memo[i][j] = -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> backtrack(stones, sum, <span class="number">0</span>, stones.length - <span class="number">1</span>, memo);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 前index数组，分为两个子序列，返回这两个子序列之差的最小值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">backtrack</span><span class="params">(<span class="type">int</span>[] stone, <span class="type">int</span> sum, <span class="type">int</span> currentSum, <span class="type">int</span> index, <span class="type">int</span>[][] memo)</span> &#123;</span><br><span class="line">        <span class="comment">// 递归结束条件</span></span><br><span class="line">        <span class="comment">// 返回index结尾的子数组 分为的两个子序列之差</span></span><br><span class="line">        <span class="keyword">if</span> (index == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">otherSum</span> <span class="operator">=</span> sum - currentSum;</span><br><span class="line">            <span class="keyword">return</span> Math.abs(otherSum - currentSum);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (memo[index][currentSum] != -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> memo[index][currentSum];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 递，两条路径，选择index，或不选择index</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">include</span> <span class="operator">=</span> backtrack(stone, sum, currentSum + stone[index], index - <span class="number">1</span>, memo);</span><br><span class="line">        <span class="type">int</span> <span class="variable">exclude</span> <span class="operator">=</span> backtrack(stone, sum, currentSum, index - <span class="number">1</span>, memo);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 归，返回选择index 和不选择 index 的最小值</span></span><br><span class="line">        memo[index][currentSum] = Math.min(include, exclude);</span><br><span class="line">        <span class="keyword">return</span> Math.min(include, exclude);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>dp</p>
<ol>
<li>**<code>dp</code> 定义：<ul>
<li><code>dp[i][j]</code> 表示前 <code>i</code> 个石头能否组成重量 <code>j</code>。</li>
</ul>
</li>
<li>​<strong>​初始化​</strong>​：<ul>
<li><code>dp[0][0] = true</code>（空子集可以组成重量 0）。</li>
<li>其他 <code>dp[0][j]</code> 默认为 <code>false</code>（Java 中布尔数组初始值为 <code>false</code>）。</li>
</ul>
</li>
<li>​<strong>​正确的状态转移​</strong>​：<ul>
<li>如果不选第 <code>i</code> 个石头，继承 <code>dp[i-1][j]</code>。</li>
<li>如果选第 <code>i</code> 个石头，检查 <code>dp[i-1][j - stones[i-1]]</code> 是否为 <code>true</code>。</li>
</ul>
</li>
<li>​<strong>​计算最终结果​</strong>​：<ul>
<li>从 <code>target</code> 反向遍历，找到最大的 <code>j</code> 使得 <code>dp[stones.length][j] = true</code>。</li>
<li>最小差值为 <code>sum - 2 * j</code>。</li>
</ul>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">// int min = Integer.MAX_VALUE;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lastStoneWeightII</span><span class="params">(<span class="type">int</span>[] stones)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (stones == <span class="literal">null</span> || stones.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> stone: stones) &#123;</span><br><span class="line">            sum += stone;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> stones.length;</span><br><span class="line">        <span class="comment">// dp[i][j]定义： 以i结尾的子数组，是否可以组成重量j</span></span><br><span class="line">        <span class="type">boolean</span>[][] dp = <span class="keyword">new</span> <span class="title class_">boolean</span>[len + <span class="number">1</span>][sum + <span class="number">1</span>];</span><br><span class="line">        <span class="comment">// init, 前0个石头可以组成重量0</span></span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// 状态转移</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= len; i ++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt;= sum; j ++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (stones[i - <span class="number">1</span>] &lt;= j) &#123;</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j] || dp[i - <span class="number">1</span>][j - stones[i - <span class="number">1</span>]];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j];</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">target</span> <span class="operator">=</span> sum / <span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxSubSet</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 找到离target最近的j</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> target; j &gt;= <span class="number">0</span>; j --) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dp[len][j] == <span class="literal">true</span>) &#123;</span><br><span class="line">                maxSubSet = j;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">         <span class="keyword">return</span> sum - <span class="number">2</span> * maxSubSet;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>一开始的思路是将dp定义成： <code>dp[i][j]</code> 为 ​<strong>​“以 <code>i</code> 结尾的子数组，分为两个子序列，这两个子序列差值的最小值”​</strong><br>不可以直接定义 <code>dp[i][j]</code> 为 ​<strong>​“以 <code>i</code> 结尾的子数组，分为两个子序列，这两个子序列差值的最小值”​</strong>​。原因如下：</p>
<ol>
<li><p>​<strong>​问题目标不匹配​</strong>​：</p>
<ul>
<li>我们需要的是 ​<strong>​全局最优解​</strong>​（整个数组分成两堆的最小差值），而不是 ​<strong>​以 <code>i</code> 结尾的子数组的局部最优解​</strong>​。</li>
<li>子问题的定义必须能递推到全局问题，而 <code>dp[i][j]</code> 的当前定义无法直接关联到最终的最小差值。</li>
</ul>
</li>
<li><p>​<strong>​状态转移难以设计​</strong>​：</p>
<ul>
<li>如果 <code>dp[i][j]</code> 表示以 <code>i</code> 结尾的子数组的最小差值，我们无法直接从 <code>dp[i-1][...]</code> 推导出 <code>dp[i][j]</code>，因为：<ul>
<li>新加入的石头 <code>stones[i]</code> 可以放入第一堆或第二堆，但差值的变化无法直接用 <code>dp[i-1][...]</code> 表示。</li>
<li>无法通过简单的 <code>Math.min</code> 或 <code>Math.max</code> 更新状态。</li>
</ul>
</li>
</ul>
</li>
<li><p>​<strong>​正确的 DP 定义​</strong>​：</p>
<ul>
<li>更合理的方式是 ​<strong>​将问题转化为背包问题​</strong>​：<ul>
<li><code>dp[i][j]</code> 表示 ​<strong>​前 <code>i</code> 个石头能否组成重量 <code>j</code>​</strong>​。</li>
<li>最终目标是找到最大的 <code>j &lt;= sum / 2</code> 使得 <code>dp[n][j] = true</code>，然后返回 <code>sum - 2 * j</code>。</li>
</ul>
</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>算法</tag>
        <tag>动态规划</tag>
        <tag>背包</tag>
        <tag>0/1 背包</tag>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title>汉明距离</title>
    <url>/2025/06/07/%E6%B1%89%E6%98%8E%E8%B7%9D%E7%A6%BB/</url>
    <content><![CDATA[<blockquote>
<blockquote>
<p>位运算基础题</p>
</blockquote>
</blockquote>
<h3 id="1-java支持的位运算："><a href="#1-java支持的位运算：" class="headerlink" title="1. java支持的位运算："></a>1. java支持的位运算：</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&amp;：按位与。 同1为1，否则为0</span><br><span class="line"></span><br><span class="line">|：按位或。 只要有一个为1，就是1</span><br><span class="line"></span><br><span class="line">~：按位非。 取反</span><br><span class="line"></span><br><span class="line">^：按位异或。 相同为0，不同为1</span><br><span class="line"></span><br><span class="line">&lt;&lt;：左位移运算符。</span><br><span class="line">&gt;&gt; ：右位移运算符。</span><br><span class="line"></span><br><span class="line">&lt;&lt;&lt;：无符号右移运算符。</span><br></pre></td></tr></table></figure>

<h3 id="2-工具函数"><a href="#2-工具函数" class="headerlink" title="2. 工具函数"></a>2. 工具函数</h3><p>lowbit函数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int lowbit(int x) &#123; </span><br><span class="line">	return x &amp; -x; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>​<strong>​输入​</strong>​：任意整数 <code>x</code>（正、负均可）。</li>
<li>​<strong>​输出​</strong>​：<code>x</code> 的二进制表示中​<strong>​最低位的 1 及其后所有 0​</strong>​组成的数。</li>
</ul>
<h4 id="应用场景："><a href="#应用场景：" class="headerlink" title="应用场景："></a>应用场景：</h4><h5 id="1-统计二进制中-1-的个数​-​"><a href="#1-统计二进制中-1-的个数​-​" class="headerlink" title="1. 统计二进制中 1 的个数​**​"></a>1. 统计二进制中 1 的个数​**​</h5><p>通过循环减去 <code>lowbit(x)</code> 直到 <code>x</code> 为 0，统计操作次数即为 1 的个数：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hammingDistance</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">	<span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> x ^ y;</span><br><span class="line">	<span class="keyword">while</span> (tmp &gt; <span class="number">0</span>) &#123;</span><br><span class="line">		tmp -= lowbit(tmp);</span><br><span class="line">		ans ++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">lowbit</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> x &amp; -x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="2-​​树状数组（Fenwick-Tree）​​"><a href="#2-​​树状数组（Fenwick-Tree）​​" class="headerlink" title="2. ​​树状数组（Fenwick Tree）​​"></a>2. ​<strong>​树状数组（Fenwick Tree）​</strong>​</h5><ul>
<li><code>lowbit</code> 用于快速定位树状数组中需要更新或查询的节点。例如：</li>
<li>​<strong>​单点更新​</strong>​：从当前位置 <code>i</code> 开始，不断加上 <code>lowbit(i)</code>，直到超出数组范围。</li>
<li>​<strong>​前缀和查询​</strong>​：从当前位置 <code>i</code> 开始，不断减去 <code>lowbit(i)</code>，累加对应节点的值。</li>
</ul>
<h5 id="3-其他应用​-​"><a href="#3-其他应用​-​" class="headerlink" title="3. 其他应用​**​"></a>3. 其他应用​**​</h5><ul>
<li>​<strong>​判断 2 的幂​</strong>​：若 <code>lowbit(x) == x</code>，则 <code>x</code> 是 2 的幂（如 <code>x=8</code> 的二进制为 <code>1000</code>）。</li>
<li>​<strong>​区间合并与离散化​</strong>​：在算法题中用于快速处理区间边界（如 AcWing 802. 区间和问题）。</li>
</ul>
<h4 id="while-x-y-0-作用"><a href="#while-x-y-0-作用" class="headerlink" title="while ((x | y) !&#x3D; 0) 作用"></a>while ((x | y) !&#x3D; 0) 作用</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hammingDistance</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> ((x | y) != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> x &amp; <span class="number">1</span>, b = y &amp; <span class="number">1</span>;</span><br><span class="line">            ans += a ^ b;</span><br><span class="line">            x &gt;&gt;= <span class="number">1</span>; y &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>while ((x | y) != 0)</code> 的作用:<br>确保循环处理 <code>x</code> 和 <code>y</code> 的​<strong>​所有二进制位​</strong>​，直到所有位都被右移出（即 <code>x</code> 和 <code>y</code> 均变为 0）。</p>
<p>按位或运算的特性​​</p>
<ul>
<li>​<strong>​<code>x | y</code>​</strong>​ 会对 <code>x</code> 和 <code>y</code> 的每一位执行逻辑或操作：<ul>
<li>若 <code>x</code> 或 <code>y</code> 的某一位为 1，结果的该位为 1。</li>
<li>仅当 <code>x</code> 和 <code>y</code> 的所有位均为 0 时，结果才为 0。</li>
</ul>
</li>
<li>​<strong>​循环终止条件​</strong>​：当 <code>x</code> 和 <code>y</code> 的所有位均处理完毕（即均为 0）时，循环结束。</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>算法</tag>
      </tags>
  </entry>
</search>

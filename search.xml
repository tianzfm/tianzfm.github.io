<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>hexo博客新增和部署命令</title>
    <url>/2025/06/07/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo c == hexo clean      # 清除缓存  </span><br><span class="line">hexo g == hexo generate   # 生成静态文件</span><br><span class="line">hexo d == hexo deploy     # 部署到github中，更新网页端的内容</span><br><span class="line">hexo s == hexo server     # 通过启动本地服务器，预览文章效果</span><br><span class="line">hexo n == hexo new  </span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>Mysql常见问题-历史学习记录归档</title>
    <url>/2025/06/08/MySQL%E5%8E%86%E5%8F%B2%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h2 id="1-事务"><a href="#1-事务" class="headerlink" title="1. 事务"></a>1. 事务</h2><p>事务就是一组原子性的SQL查询，或者说一个独立的工作单元。如果数据库引擎能成功的对数据库应用该组查询的全部语句，那么就执行该组查询。如果其中有任何一条语句因为崩溃或其他原因无法执行，那么所有的语句都不会执行。也就是说，事务内的语句，要么全部执行成功，要么全部执行失败。</p>
<h3 id="1-1-事务的四大特性-ACID"><a href="#1-1-事务的四大特性-ACID" class="headerlink" title="1.1 事务的四大特性 ACID"></a>1.1 事务的四大特性 ACID</h3><ol>
<li>原子性（Atomicity）<br>一个事务必须被视为一个不可分割的最小工作单元，整个事务中的所有操作要么全部提交成功，要么全部失败回滚，<strong>对于一个事务来说，不可能只执行其中的一部分操作，这就是事务的原子性</strong>。  </li>
<li>一致性（Consistency）<br>数据库总是从一个一致性的状态转换到另一个一致性的状态。<strong>只要事务没有提交，事务中所做的更改就不会保存到数据库中</strong>。</li>
<li>隔离性（Isolation）<br>通常来说，一个事务所做的修改在最终提交以前，对其他事务是不可见的。由<strong>隔离级别</strong>确定可不可见。</li>
<li>持久性（Durability）<br>一旦事务提交，则其所做的修改就会永久保存到数据库中。此时即使系统崩溃，修改的数据也不会丢失。</li>
</ol>
<h3 id="1-2-隔离级别"><a href="#1-2-隔离级别" class="headerlink" title="1.2 隔离级别"></a>1.2 隔离级别</h3><blockquote>
<p>在SQL标准中定义了四种隔离级别，每一种隔离级别都规定了一个事务中所做的修改，哪些在事务内和事务间是可见的，哪些是不可见的。较低级别的隔离通常可以执行更高的并发，系统的开销也更低。</p>
</blockquote>
<ol>
<li>READ UNCOMMITTED(未提交读)<br>事务中的修改，即使没有提交，对其他事务也都是可见的。<strong>事务可以读取未提交的数据，这也被称为脏读</strong>。</li>
<li>READ COMMITTED(提交读， 不可重复读)<br>大多数数据库的默认隔离级别都是READ COMMITTED（但Mysql不是），该级别满足前面提到的隔离性的简单定义：<strong>一个事务开始时，只能看见已经提交了的事务所作的修改。也就是说，一个事务从开始到提交之前，所做的任何修改对其他事务都是不可见的。这个级别有时候也叫不可重复读，因为执行两次同样的查询，可能得到不一样的结果。</strong></li>
<li>REPEATABLE READ(可重复读)<br>MYSQL的默认隔离级别，REPEATABLE READ解决了脏读和不可重复读的问题。该级别可以保证同一个事务中多次读取同样记录的结果是一致的。但是理论上，可重复读解决不了幻读问题。<strong>所谓幻读，是指当某个事务在读取某个范围内的记录时，另外一个事务又在该范围内插入了新的记录，当之前的事务再次读取该范围的记录时，会产生幻行</strong>。InnoDB和XtraDB存储殷勤通过多版本并发控制解决了幻读问题。</li>
<li>SERIALIZABLE(可串行化)<br>最高隔离级别。强制事务串行执行，避免了幻读问题。简单来说，SERIALIZABLE会在读取的每一行数据上都加锁，所以可能导致大量的超时和锁争用问题。</li>
</ol>
<h3 id="1-3-死锁"><a href="#1-3-死锁" class="headerlink" title="1.3 死锁"></a>1.3 死锁</h3><p>死锁是指两个或多个事务在同一资源上相互占用，并请求锁定对方占用的资源，从而导致恶性循环的现象。当多个事务试图以不同的顺序锁定资源时，就可能会产生死锁。多个事务同时锁定同一个资源时，也会产生死锁。</p>
<ul>
<li>InnoDB目前处理死锁的方法是：将持有最少行级排他锁的事务进行回滚（相对简单的死锁处理算法）。</li>
<li>死锁的产生有双重原因，有些是因为真正的数据冲突，这种情况通常很难避免，但有些则完全是由于存储引擎的实现方式导致的。<strong>死锁发生后，只需要部分或完全回滚其中一个事务，才能打破死锁</strong>。</li>
</ul>
<h3 id="1-4-MYSQL中的事务"><a href="#1-4-MYSQL中的事务" class="headerlink" title="1.4 MYSQL中的事务"></a>1.4 MYSQL中的事务</h3><ol>
<li>MYSQL中默认采用自动提交(AUTOCOMMIT)模式。也就是说，如果不是显示的开始一个事务，每个查询都被当做一个事务执行提交操作。</li>
<li><code>SET TRANSACTION ISOLATION</code>命令来设置隔离级别；</li>
<li><strong>隐式和显式锁定</strong>：InnoDB采用的是两阶段锁定协议。在事物的执行过程中，随时都可以执行锁定，锁只有执行COMMIT和ROLLBACK的时候才会释放，并且所有的锁是在同一时刻被释放。InnoDB也支持显示锁定，也支持LOCK TABLES和UNLOCK TABLES语句，这是在服务器层实现的，和存储引擎无关。</li>
</ol>
<h2 id="2-多版本并发控制-MVCC"><a href="#2-多版本并发控制-MVCC" class="headerlink" title="2. 多版本并发控制 MVCC"></a>2. 多版本并发控制 MVCC</h2><ol>
<li><strong>为了提升并发性能</strong>，MYSQL中的大多存储殷勤实现的都不是简单的行级锁，一般都同时实现了MVCC</li>
<li>可认为MVCC是行级锁的变种，很多情况避免了加锁操作，因此开销更低。实现了非阻塞的读操作，写操作也只锁定必要的行。</li>
<li><strong>MVCC的实现，是通过保存数据在某个时间点的快照来实现的</strong>。</li>
<li>MVCC的实现不同，分为<strong>乐观并发控制</strong>和<strong>悲观并发控制</strong></li>
<li>MVCC只在REPEATABLE READ和READ COMMITTED两个隔离级别下工作；其他级别与MVCC不兼容，因为READ UNCOMMITED总是读取最新的数据行，而不是符合当前事务版本的数据行。</li>
<li>InnoDB的MVCC，是通过在每行记录后面保存两个隐藏的列来实现的。这两个列，一个保存了行的创建时间，一个保存行的过期时间（或删除时间）。存储的不是实际时间值，而是系统版本号。每开始一个新事物，系统版本号都会自动递增。事务开始时刻的系统版本号会作为事务的版本号，用来和查询到的每行记录的版本号进行比较。</li>
</ol>
<h2 id="3-存储引擎"><a href="#3-存储引擎" class="headerlink" title="3. 存储引擎"></a>3. 存储引擎</h2><ol>
<li><p>InnoDB  </p>
<ol>
<li>是 MySQL 默认的事务型存储引擎，只有在需要它不支持的特性时，才考虑使用其它存储引擎。  </li>
<li>实现了四个标准的隔离级别，默认级别是可重复读（REPEATABLE READ）。在可重复读隔离级别下，通过多版本并发控制（MVCC）+ Next-Key Locking 防止幻影读。  </li>
<li>主索引是聚簇索引，在索引中保存了数据，从而避免直接读取磁盘，因此对查询性能有很大的提升。</li>
<li>内部做了很多优化，包括从磁盘读取数据时采用的可预测性读、能够加快读操作并且自动创建的自适应哈希索引、能够加速插入操作的插入缓冲区等。</li>
<li>支持真正的在线热备份。其它存储引擎不支持在线热备份，要获取一致性视图需要停止对所有表的写入，而在读写混合场景中，停止写入可能也意味着停止读取。</li>
</ol>
</li>
<li><p>MyISAM</p>
<ol>
<li>设计简单，数据以紧密格式存储。对于只读数据，或者表比较小、可以容忍修复操作，则依然可以使用它。</li>
<li>提供了大量的特性，包括压缩表、空间数据索引等。</li>
<li>不支持事务。</li>
<li>不支持行级锁，只能对整张表加锁，读取时会对需要读到的所有表加共享锁，写入时则对表加排它锁。但在表有读取操作的同时，也可以往表中插入新的记录，这被称为并发插入（CONCURRENT INSERT）。</li>
<li>可以手工或者自动执行检查和修复操作，但是和事务恢复以及崩溃恢复不同，可能导致一些数据丢失，而且修复操作是非常慢的。</li>
<li>如果指定了 DELAY_KEY_WRITE 选项，在每次修改执行完成时，不会立即将修改的索引数据写入磁盘，而是会写到内存中的键缓冲区，只有在清理键缓冲区或者关闭表的时候才会将对应的索引块写入磁盘。这种方式可以极大的提升写入性能，但是在数据库或者主机崩溃时会造成索引损坏，需要执行修复操作。</li>
</ol>
</li>
<li><p>InnoDB和MyISAM比较</p>
<ol>
<li>事务：InnoDB 是事务型的，可以使用 Commit 和 Rollback 语句。MyISAM 强调的是性能，每次查询具有原子性,其执行速度比InnoDB类型更快，但是不提供事务支持。但是InnoDB 提供事务支持，外部键等高级数据库功能。 具有事务(commit)、回滚(rollback)和崩溃修复能力(crash recovery capabilities)的事务安全(transaction-safe (ACID compliant))型表。</li>
<li>锁：MyISAM 只支持表级锁，而 InnoDB 还支持行级锁。</li>
<li>外键：InnoDB 支持外键。</li>
<li>备份：InnoDB 支持在线热备份。</li>
<li>是否支持MVCC ：仅 InnoDB 支持。应对高并发事务, MVCC比单纯的加锁更高效;MVCC只在 READ COMMITTED 和 REPEATABLE READ 两个隔离级别下工作;MVCC可以使用 乐观(optimistic)锁 和 悲观(pessimistic)锁来实现;各数据库中MVCC实现并不统一。</li>
<li>崩溃恢复：MyISAM 崩溃后发生损坏的概率比 InnoDB 高很多，而且恢复的速度也更慢。</li>
<li>其它特性：MyISAM 支持压缩表和空间数据索引。</li>
</ol>
</li>
</ol>
<h2 id="4-数据库范式"><a href="#4-数据库范式" class="headerlink" title="4. 数据库范式"></a>4. 数据库范式</h2><ol>
<li>第一范式：<strong>要求字段达到原子性，使字段不可再分</strong>。每一列都是不可分割的基本数据项，即表的列的具有原子性,不可再分解，即列的信息，不能分解。<strong>不满足第一范式的数据库就不是关系型数据库</strong>。</li>
<li>第二范式：<strong>保证一张表只描述一件事情</strong>。也就是在满足第一范式的基础上，<strong>数据库表中所有非主键字段都完全依赖于主键字段</strong>。</li>
<li>第三范式：<strong>保证每列都和主键直接相关</strong>，也就是说表中的字段和主键直接对应不依靠其他中间字段，<strong>说白了就是，决定某字段值的必须是主键</strong>。<blockquote>
<p>总结：<br><strong>第一范式</strong>：确保每列的原子性（强调的是列的原子性，即列不能再分为其他几列）；若不满足则不是关系型数据库。<br><strong>第二范式</strong>：在第一范式的基础上更进一层，目标是确保表中的每列都和主键相关。(一是表必须有一个主键；二是没有包含在主键中的列必须完全依赖于主键，而不能只依赖于主键的部分)<br><strong>第三范式</strong>：在第二范式的基础上更进一层,目标是确保每列都和主键列直接相关,而不是间接相关(另外非主键列必须直接依赖于主键，不能存在传递依赖).</p>
</blockquote>
</li>
</ol>
<h2 id="5-乐观锁和悲观锁"><a href="#5-乐观锁和悲观锁" class="headerlink" title="5. 乐观锁和悲观锁"></a>5. 乐观锁和悲观锁</h2><blockquote>
<p>乐观锁和悲观锁是处理并发资源的常用手段，是一种思想，不能与mysql中提供的锁机制（表锁，行锁，排他锁，共享锁）混为一谈。</p>
</blockquote>
<h3 id="5-1-悲观锁"><a href="#5-1-悲观锁" class="headerlink" title="5.1 悲观锁"></a>5.1 悲观锁</h3><p>悲观锁指的是对数据被外界修改持悲观态度，因此在整个数据处理过程中将数据处于锁定状态。<strong>悲观锁的实现，大都依靠数据库提供的锁机制来实现</strong>。（可以理解为java中的synchronized关键字）。<strong>要使用悲观锁，首先要关闭mysql的自动提交：<code>set autocommit = 0</code>，因为MySQL默认使用autocommit模式，也就是说，当你执行一个更新操作后，MySQL会立刻将结果进行提交；注意，mysql中的行级锁是基于索引的，如果sql没有走索引，那将使用表级锁把整张表锁住。</strong>。<br><strong>悲观锁的实现方式有两种：共享锁（读锁）和排他锁（写锁）</strong>   </p>
<ul>
<li><strong>共享锁（IS锁）</strong>：<code>SELECT ... LOCK IN SHARE MODE</code>，即在符合条件的rows上都加了共享锁，这样的话，其他session可以读取这些记录，也可以继续添加IS锁，但是无法修改这些记录直到你这个加锁的session执行完成(否则直接锁等待超时)。  </li>
<li><strong>排他锁（IX锁）</strong>: <code>SELECT ... FOR UPDATE</code> ，即在符合条件的rows上都加了排它锁，其他session也就无法在这些记录上添加任何的S锁或X锁。如果不存在一致性非锁定读的话，那么其他session是无法读取和修改这些记录的，但是innodb有非锁定读(快照读并不需要加锁)，for update之后并不会阻塞其他session的快照读取操作，除了select …lock in share mode和select … for update这种显示加锁的查询操作。</li>
</ul>
<p><strong>mysql InnoDB引擎默认的修改数据语句:update,delete,insert都会自动给涉及到的数据加上排他锁,select语句默认不会加任何锁类型</strong>。  </p>
<h3 id="5-2-乐观锁"><a href="#5-2-乐观锁" class="headerlink" title="5.2 乐观锁"></a>5.2 乐观锁</h3><p>乐观锁假设认为数据一般情况下不会产生冲突，所以在数据进行提交更新的时候，才会正式对数据的冲突与否进行检测，如果发现冲突，则返回错误信息，让用户决定如何去做。（类似Java中的CAS操作）<br><strong>乐观锁的实现有两种方式：版本号和时间戳控制</strong>：    </p>
<ul>
<li>版本号控制的原理：<ol>
<li>为表中加一个 version 字段；</li>
<li>当读取数据时，连同这个 version 字段一起读出；</li>
<li>数据每更新一次就将此值加一；</li>
<li>当提交更新时，判断数据库表中对应记录的当前版本号是否与之前取出来的版本号一致，如果一致则可以直接更新，如果不一致则表示是过期数据需要重试或者做其它操作（PS：这完完全全就是 CAS 的实现逻辑呀~）</li>
</ol>
</li>
<li>时间戳控制：至于时间戳控制，其原理和版本号控制差不多，也是在表中添加一个 timestamp 的时间戳字段，然后提交更新时判断数据库中对应记录的当前时间戳是否与之前取出来的时间戳一致，一致就更新，不一致就重试。</li>
</ul>
<h2 id="6-内连接-左连接-右连接"><a href="#6-内连接-左连接-右连接" class="headerlink" title="6. 内连接 左连接 右连接"></a>6. 内连接 左连接 右连接</h2><ul>
<li>内连接：查询两张表的交集  </li>
<li>左连接：left join左边是主表，显示左边有的；右边如果没有就为null  </li>
<li>右连接：right join右边是主表，显示右边有的；左边如果没有就为null</li>
</ul>
<h2 id="7-B树和B-树"><a href="#7-B树和B-树" class="headerlink" title="7. B树和B+树"></a>7. B树和B+树</h2><blockquote>
<p>在计算机科学中，B树（B-tree）是一种树状数据结构，它能够存储数据、对其进行排序并允许以O(log n)的时间复杂度运行进行查找、顺序读取、插入和删除的数据结构。B树，概括来说是一个节点可以拥有多于2个子节点的二叉查找树。与自平衡二叉查找树不同，B-树为系统最优化大块数据的读和写操作。  </p>
</blockquote>
<ol>
<li>B+树和B树的区别：  <ul>
<li>B+树中只有叶子节点会带有指向记录的指针（ROWID），而B树则所有节点都带有，<strong>B树在内部节点出现的索引项不会再出现在叶子节点中，而B+树中，所有记录节点都是按键值的大小顺序存放在同一层的叶子节点上，由各叶子节点指针进行连接</strong>。</li>
<li>B+树中所有叶子节点都是通过指针连接在一起，而B树不会。</li>
</ul>
</li>
<li>B+树的优点：  <ul>
<li>非叶子节点不会带上ROWID，这样，一个块中可以容纳更多的索引项，一是可以降低树的高度。二是一个内部节点可以定位更多的叶子节点。</li>
<li>叶子节点之间通过指针来连接，范围扫描将十分简单，而对于B树来说，则需要在叶子节点和内部节点不停的往返移动。</li>
</ul>
</li>
<li>B树的优点：<ul>
<li>对于在内部节点的数据，可直接得到，不必根据叶子节点来定位。</li>
</ul>
</li>
</ol>
<h2 id="8-索引"><a href="#8-索引" class="headerlink" title="8. 索引"></a>8. 索引</h2><blockquote>
<p>索引（在MYSQL中也叫做键），是存储引擎用于快速找到记录的一种数据结构。索引是在存储引擎层实现的，而不是在服务器层实现的，所以不同存储引擎具有不同的索引类型和实现。</p>
</blockquote>
<h3 id="8-1-索引的类型"><a href="#8-1-索引的类型" class="headerlink" title="8.1 索引的类型"></a>8.1 索引的类型</h3><ol>
<li><p>B-Tree索引  </p>
<blockquote>
<p>B-Tree索引能加快访问数据的速度，是因为存储引擎不再需要进行全表扫描来获取需要的数据，取而代之的是从索引的根节点开始进行搜索。根节点的槽中存放了指向子节点的指针，存储引擎根据这些指针向下层查找。通过比较节点页的值和要查找的值可以找到合适的指针进入下层子节点，这些指针实际上定义了子节点页中值的上限和下限。最终存储引擎要么是找到对应的值，要么该记录不存在。</p>
</blockquote>
<ul>
<li><p>是大多数 MySQL 存储引擎的默认索引类型。</p>
</li>
<li><p>因为不再需要进行全表扫描，只需要对树进行搜索即可，所以查找速度快很多。</p>
</li>
<li><p>因为 B+ Tree 的有序性，所以除了用于查找，还可以用于排序和分组。</p>
</li>
<li><p>可以指定多个列作为索引列，多个索引列共同组成键。</p>
</li>
<li><p>适用于全键值、键值范围和键前缀查找，其中键前缀查找只适用于最左前缀查找。如果不是按照索引列的顺序进行查找，则无法使用索引。</p>
</li>
<li><p>InnoDB 的 B+Tree 索引分为主索引和辅助索引。主索引的叶子节点 data 域记录着完整的数据记录，这种索引方式被称为聚簇索引。因为无法把数据行存放在两个不同的地方，所以一个表只能有一个聚簇索引。</p>
</li>
<li><p>辅助索引的叶子节点的 data 域记录着主键的值，因此在使用辅助索引进行查找时，需要先查找到主键值，然后再到主索引中进行查找。  </p>
</li>
<li><p>B-Tree索引的一些限制：  </p>
<ol>
<li>如果不是按照索引的最左列开始查找，则无法使用索引。  </li>
<li>不能跳过索引中的列。  </li>
<li>如果查询中有某个列的范围查询，则其右边所有列都无法使用索引优化查找。</li>
</ol>
</li>
</ul>
</li>
<li><p>哈希索引  </p>
<blockquote>
<p>哈希索引能以 O(1) 时间进行查找，但是失去了有序性：  </p>
</blockquote>
<ul>
<li>无法用于排序与分组；</li>
<li>只支持精确查找，无法用于部分查找和范围查找。</li>
<li>InnoDB 存储引擎有一个特殊的功能叫“自适应哈希索引”，当某个索引值被使用的非常频繁时，会在 B+Tree 索引之上再创建一个哈希索引，这样就让 B+Tree 索引具有哈希索引的一些优点，比如快速的哈希查找。</li>
</ul>
</li>
<li><p>空间数据索引</p>
<ul>
<li>MyISAM 存储引擎支持空间数据索引（R-Tree），可以用于地理数据存储。空间数据索引会从所有维度来索引数据，可以有效地使用任意维度来进行组合查询。</li>
<li>必须使用 GIS 相关的函数来维护数据。</li>
</ul>
</li>
<li><p>全文索引</p>
<ul>
<li>MyISAM 存储引擎支持全文索引，用于查找文本中的关键词，而不是直接比较是否相等。</li>
<li>查找条件使用 MATCH AGAINST，而不是普通的 WHERE。</li>
<li>全文索引使用倒排索引实现，它记录着关键词到其所在文档的映射。</li>
<li>InnoDB 存储引擎在 MySQL 5.6.4 版本中也开始支持全文索引。</li>
</ul>
</li>
</ol>
<h3 id="8-2-索引优化"><a href="#8-2-索引优化" class="headerlink" title="8.2 索引优化"></a>8.2 索引优化</h3><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">1. 独立的列</span><br><span class="line">2. 多列索引</span><br><span class="line">3. 前缀索引</span><br><span class="line">4. 索引列的顺序</span><br><span class="line">5. 覆盖索引</span><br><span class="line">6. 使用索引扫描来做排序</span><br><span class="line">7. 前缀压缩索引</span><br><span class="line">8. 冗余和重复索引</span><br><span class="line">9. 未使用的索引</span><br><span class="line">10. 索引和锁</span><br></pre></td></tr></table></figure>
<ol>
<li>独立的列<br>在进行查询时，索引列不能是表达式的一部分，也不能是函数的参数，否则无法使用索引。<br><code>SELECT actor_id FROM sakila.actor WHERE actor_id + 1 = 5;</code></li>
<li>多列索引<br>在需要使用多个列作为条件进行查询时，使用多列索引比使用多个单列索引性能更好。例如下面的语句中，最好把 actor_id 和 film_id 设置为多列索引。</li>
<li>索引列的顺序<br>让选择性最强的索引列放在前面。<br>索引的选择性是指：不重复的索引值和记录总数的比值。最大值为 1，此时每个记录都有唯一的索引与其对应。选择性越高，每个记录的区分度越高，查询效率也越高。  </li>
<li>前缀索引<br>对于 BLOB、TEXT 和 VARCHAR 类型的列，必须使用前缀索引，只索引开始的部分字符。前缀长度的选取需要根据索引选择性来确定。</li>
<li>聚簇索引<br>当表有聚簇索引时，它的数据行实际上存放在索引的叶子页中。因为无法同时把数据行存放在两个不同的地方，因此一个表只能有一个聚簇索引。  </li>
<li>覆盖索引 <a href="https://www.jianshu.com/p/8991cbca3854">覆盖索引</a><br>索引分为两种：聚簇索引和非聚簇索引。聚簇索引就是通过主键聚集数据，数据行存放在索引的叶子页中；而非聚簇索引的叶子页中存放的是主键值。<br>索引包含所有需要查询的字段的值。<br>具有以下优点：    <ul>
<li>索引通常远小于数据行的大小，只读取索引能大大减少数据访问量。  </li>
<li>一些存储引擎（例如 MyISAM）在内存中只缓存索引，而数据依赖于操作系统来缓存。因此，只访问索引可以不使用系统调用（通常比较费时）。</li>
<li>对于 InnoDB 引擎，若辅助索引能够覆盖查询，则无需访问主索引。<br>explain的输出结果Extra字段为Using index时，能够触发索引覆盖。</li>
</ul>
</li>
</ol>
<h3 id="8-3-索引的优点"><a href="#8-3-索引的优点" class="headerlink" title="8.3 索引的优点"></a>8.3 索引的优点</h3><ol>
<li>大大减少了服务器需要扫描的数据行数。</li>
<li>帮助服务器避免进行排序和分组，以及避免创建临时表（B+Tree 索引是有序的，可以用于 ORDER BY 和 GROUP BY 操作。临时表主要是在排序和分组过程中创建，不需要排序和分组，也就不需要创建临时表）。</li>
<li>将随机 I&#x2F;O 变为顺序 I&#x2F;O（B+Tree 索引是有序的，会将相邻的数据都存储在一起）。</li>
</ol>
<h3 id="8-4-索引的使用条件"><a href="#8-4-索引的使用条件" class="headerlink" title="8.4 索引的使用条件"></a>8.4 索引的使用条件</h3><ol>
<li>对于非常小的表、大部分情况下简单的全表扫描比建立索引更高效；</li>
<li>对于中到大型的表，索引就非常有效；</li>
<li>但是对于特大型的表，建立和维护索引的代价将会随之增长。这种情况下，需要用到一种技术可以直接区分出需要查询的一组数据，而不是一条记录一条记录地匹配，例如可以使用分区技术。</li>
</ol>
<h2 id="9-什么是主键"><a href="#9-什么是主键" class="headerlink" title="9. 什么是主键"></a>9. 什么是主键</h2><blockquote>
<p>主键（PRIMARY KEY），也称“主键约束”。<br>MySQL主键约束是一个列或者多个列的组合，其值能唯一地标识表中的每一行。<br>这样的一列或多列称为表的主键，通过它可以强制表的实体完整性。</p>
</blockquote>
<ol>
<li>主键规则：<ul>
<li>每个表有且仅有一个主键。</li>
<li>唯一性原则。主键值必须唯一地标识表中的每一行，且不能为NULL，即表中不可能存在两行数据有相同的主键值。</li>
<li>一个列名只能在复合主键列表中出现一次。</li>
<li>最小化原则。复合主键不能包含不必要的多余列。即当把复合主键的某一列删除后，如果剩下的列构成的主键仍然满足唯一性原则，那么这个复合主键是不正确的。</li>
</ul>
</li>
<li>主键和唯一索引的区别  <ul>
<li>主键是一种约束，唯一索引是一种索引，两者在本质上是不同的。</li>
<li>主键创建后一定包含一个唯一性索引，唯一性索引并不一定就是主键。</li>
<li>唯一性索引列允许空值，而主键列不允许为空值。</li>
<li>主键列在创建时，已经默认为非空值 + 唯一索引了。</li>
<li>主键可以被其他表引用为外键，而唯一索引不能。</li>
<li>一个表最多只能创建一个主键，但可以创建多个唯一索引。</li>
<li>主键和唯一索引都可以有多列。</li>
<li>主键更适合那些不容易更改的唯一标识，如自动递增列、身份证号等。<br><strong>总体来说：主键相当于一本书的页码，索引相当于书的目录。</strong></li>
</ul>
</li>
</ol>
<h2 id="10-Union和Union-All的区别"><a href="#10-Union和Union-All的区别" class="headerlink" title="10. Union和Union All的区别"></a>10. Union和Union All的区别</h2><ul>
<li>union：对两个结果集进行并集操作，不包括重复行，同时进行默认规则的排序；</li>
<li>union All：对两个结果集进行并集操作，包括重复行，不进行排序；</li>
</ul>
<h2 id="11-in和exists区别"><a href="#11-in和exists区别" class="headerlink" title="11. in和exists区别"></a>11. in和exists区别</h2><ol>
<li>in和exists的区别：<ol>
<li>in有返回结果集，exists返回boolean</li>
<li>in的查询效率比exists要快</li>
<li>in先进行内查询在外查询，exists首先执行一次外部查询，在进行内部查询</li>
<li>IN适合于外表大而内表小的情况；EXISTS适合于外表小而内表大的情况。</li>
</ol>
</li>
<li>not in和not exists的区别：<ol>
<li>not in查询每条记录并没有用到索引。not exists根据索引查询，查询的效率远远高与not in查询的效率。</li>
</ol>
</li>
</ol>
<h2 id="12-MYSQL锁划分"><a href="#12-MYSQL锁划分" class="headerlink" title="12. MYSQL锁划分"></a>12. MYSQL锁划分</h2><ol>
<li>可以按照锁的粒度把数据库锁分为表级锁和行级锁。  <ol>
<li>表级锁<br> Mysql中锁定 粒度最大 的一种锁，对当前操作的整张表加锁，实现简单 ，资源消耗也比较少，加锁快，不会出现死锁 。其锁定粒度最大，触发锁冲突的概率最高，并发度最低，MyISAM和 InnoDB引擎都支持表级锁。  </li>
<li>行级锁<br> Mysql中锁定 粒度最小 的一种锁，只针对当前操作的行进行加锁。 行级锁能大大减少数据库操作的冲突。其加锁粒度最小，并发度高，但加锁的开销也最大，加锁慢，会出现死锁。 InnoDB支持的行级锁，包括如下几种。<br> 1. Record Lock: 对索引项加锁，锁定符合条件的行。其他事务不能修改和删除加锁项；<br> 2. Gap Lock: 对索引项之间的“间隙”加锁，锁定记录的范围（对第一条记录前的间隙或最后一条将记录后的间隙加锁），不包含索引项本身。其他事务不能在锁范围内插入数据，这样就防止了别的事务新增幻影行。<br> 3. Next-key Lock： 锁定索引项本身和索引范围。即Record Lock和Gap Lock的结合。可解决幻读问题。</li>
</ol>
</li>
<li>按照是否可写分类。  <ol>
<li>共享锁（s）<br> 共享锁（Share Locks，简记为S）又被称为读锁，其他用户可以并发读取数据，但任何事务都不能获取数据上的排他锁，直到已释放所有共享锁。<br> 共享锁(S锁)又称为读锁，若事务T对数据对象A加上S锁，则事务T只能读A；其他事务只能再对A加S锁，而不能加X锁，直到T释放A上的S锁。这就保证了其他事务可以读A，但在T释放A上的S锁之前不能对A做任何修改。  </li>
<li>排他锁（X）：<br> 排它锁（(Exclusive lock,简记为X锁)）又称为写锁，若事务T对数据对象A加上X锁，则只允许T读取和修改A，其它任何事务都不能再对A加任何类型的锁，直到T释放A上的锁。它防止任何其它事务获取资源上的锁，直到在事务的末尾将资源上的原始锁释放为止。在更新操作(INSERT、UPDATE 或 DELETE)过程中始终应用排它锁。</li>
</ol>
</li>
</ol>
<h2 id="13-读写分离"><a href="#13-读写分离" class="headerlink" title="13. 读写分离"></a>13. 读写分离</h2><ol>
<li>主服务器处理写操作以及实时性要求比较高的读操作，而从服务器处理读操作。  </li>
<li>读写分离能提高性能的原因在于：  <ul>
<li>主从服务器负责各自的读和写，极大程度缓解了锁的争用；  </li>
<li>从服务器可以使用 MyISAM，提升查询性能以及节约系统开销；  </li>
<li>增加冗余，提高可用性。<br><strong>读写分离常用代理方式来实现，代理服务器接收应用层传来的读写请求，然后决定转发到哪个服务器</strong>。</li>
</ul>
</li>
</ol>
<h2 id="14-主从复制"><a href="#14-主从复制" class="headerlink" title="14. 主从复制"></a>14. 主从复制</h2><ol>
<li>主要涉及三个线程：binlog 线程、I&#x2F;O 线程和 SQL 线程。<ol>
<li>binlog 线程 ：负责将主服务器上的数据更改写入二进制日志（Binary log）中。</li>
<li>I&#x2F;O 线程 ：负责从主服务器上读取二进制日志，并写入从服务器的中继日志（Relay log）。</li>
<li>SQL 线程 ：负责读取中继日志，解析出主服务器已经执行的数据更改并在从服务器中重放（Replay）。</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>历史学习记录</tag>
      </tags>
  </entry>
  <entry>
    <title>dp-分割等和子集</title>
    <url>/2025/06/08/%E5%88%86%E5%89%B2%E7%AD%89%E5%92%8C%E5%AD%90%E9%9B%86/</url>
    <content><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">给你一个 **只包含正整数** 的 **非空** 数组 `nums` 。请你判断是否可以将这个数组分割成两个子集，使得两个子集的元素和相等。</span><br><span class="line"></span><br><span class="line">**示例 1：**</span><br><span class="line">输入：nums = [1,5,11,5]</span><br><span class="line">输出：true</span><br><span class="line">解释：数组可以分割成 [1, 5, 5] 和 [11] 。</span><br><span class="line"></span><br><span class="line">**示例 2：**</span><br><span class="line">输入：nums = [1,2,3,5]</span><br><span class="line">输出：false</span><br><span class="line">解释：数组不能分割成两个元素和相等的子集。</span><br></pre></td></tr></table></figure>

<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>0-1背包问题<br>回溯 -&gt; 带返回值的回溯 -&gt; 记忆化数组 -&gt; dp<br>遍历数组nums，对每个元素都有两个选择：选或不选<br>转移方程： <code>dp[i][j] = dp[i - 1][j] + dp[i - 1][j - nums[i]]</code></p>
<p>不带返回值的回溯</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">found</span> <span class="operator">=</span> <span class="literal">false</span>; <span class="comment">// 成员变量记录是否找到解</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canPartition</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="literal">null</span> || nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            sum += num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (sum % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">target</span> <span class="operator">=</span> sum / <span class="number">2</span>;</span><br><span class="line">        backtrack(nums, target, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> found;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backtrack</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target, <span class="type">int</span> start)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (found) <span class="keyword">return</span>; <span class="comment">// 提前终止，如果已经找到解</span></span><br><span class="line">        <span class="keyword">if</span> (target == <span class="number">0</span>) &#123;</span><br><span class="line">            found = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (target &lt; <span class="number">0</span> || start &gt;= nums.length) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 选择当前数字</span></span><br><span class="line">        backtrack(nums, target - nums[start], start + <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 不选择当前数字</span></span><br><span class="line">        backtrack(nums, target, start + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>带返回值的回溯</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canPartition</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="literal">null</span> || nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            sum += num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (sum % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">target</span> <span class="operator">=</span> sum / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> backtrack(nums, target, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">backtrack</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target, <span class="type">int</span> start)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (target == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (target &lt; <span class="number">0</span> || start &gt;= nums.length) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 当前数字的两个选择：选 或 不选</span></span><br><span class="line">        <span class="keyword">return</span> backtrack(nums, target, start + <span class="number">1</span>) || backtrack(nums, target - nums[start], start + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>记忆化数组<br>上述回溯算法会超时。所以加入记忆化数组优化<br>记忆化数组的定义要能唯一的确定一个状态</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canPartition</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="literal">null</span> || nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            sum += num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (sum % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">target</span> <span class="operator">=</span> sum / <span class="number">2</span>;</span><br><span class="line">        Boolean[][] memo = <span class="keyword">new</span> <span class="title class_">Boolean</span>[nums.length + <span class="number">1</span>][target + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> backtrack(nums, target, <span class="number">0</span>, memo);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">backtrack</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target, <span class="type">int</span> start, Boolean[][] memo)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (target == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (target &lt; <span class="number">0</span> || start &gt;= nums.length) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (memo[start][target] != <span class="literal">null</span>) <span class="keyword">return</span> memo[start][target];</span><br><span class="line">        memo[start][target] = backtrack(nums, target, start + <span class="number">1</span>, memo) || backtrack(nums, target - nums[start], start + <span class="number">1</span>, memo);</span><br><span class="line">        <span class="keyword">return</span> memo[start][target];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>dp</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canPartition</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="literal">null</span> || nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            sum += num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (sum % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">target</span> <span class="operator">=</span> sum / <span class="number">2</span>;</span><br><span class="line">        <span class="type">boolean</span>[][] dp = <span class="keyword">new</span> <span class="title class_">boolean</span>[len + <span class="number">1</span>][target + <span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= len; i ++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt;= target; j ++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (j &gt;= nums[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j] || dp[i - <span class="number">1</span>][j - nums[i - <span class="number">1</span>]];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;    </span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[len][target];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>算法</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>最后一块石头的重量2</title>
    <url>/2025/06/08/%E6%9C%80%E5%90%8E%E4%B8%80%E5%9D%97%E7%9F%B3%E5%A4%B4%E7%9A%84%E9%87%8D%E9%87%8F2/</url>
    <content><![CDATA[<p>我们需要将石头分成两堆，使得两堆石头的重量差最小。这可以转化为 ​<strong>​0&#x2F;1背包问题​</strong>​，即找到一个子集，使得其和尽可能接近 <code>总重量 / 2</code>。</p>
<h3 id="1-暴力解法-超时"><a href="#1-暴力解法-超时" class="headerlink" title="1. 暴力解法(超时)"></a>1. 暴力解法(超时)</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lastStoneWeightII</span><span class="params">(<span class="type">int</span>[] stones)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (stones == <span class="literal">null</span> || stones.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> stone: stones) &#123;</span><br><span class="line">            sum += stone;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> stones.length;</span><br><span class="line">        backtrack(stones, sum, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> min;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backtrack</span><span class="params">(<span class="type">int</span>[] stone, <span class="type">int</span> sum, <span class="type">int</span> currentSum, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= stone.length) &#123;</span><br><span class="line">	        <span class="comment">// 记录两部分子数组 之差 的最小值</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">otherSum</span> <span class="operator">=</span> sum - currentSum;</span><br><span class="line">            min = Math.min(min, Math.abs(otherSum - currentSum));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">		<span class="comment">// 两个选择：选index处的元素，或者不选</span></span><br><span class="line">        backtrack(stone, sum, currentSum + stone[index], index + <span class="number">1</span>);</span><br><span class="line">        backtrack(stone, sum, currentSum, index + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-带返回值的回溯，-向记忆化数组和dp的形式靠近"><a href="#2-带返回值的回溯，-向记忆化数组和dp的形式靠近" class="headerlink" title="2. 带返回值的回溯， 向记忆化数组和dp的形式靠近"></a>2. 带返回值的回溯， 向记忆化数组和dp的形式靠近</h3><h4 id="从index-0-递归"><a href="#从index-0-递归" class="headerlink" title="从index &#x3D; 0 递归"></a>从index &#x3D; 0 递归</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">	<span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">// int min = Integer.MAX_VALUE;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lastStoneWeightII</span><span class="params">(<span class="type">int</span>[] stones)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (stones == <span class="literal">null</span> || stones.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> stone: stones) &#123;</span><br><span class="line">            sum += stone;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// **从0开始递归**</span></span><br><span class="line">        <span class="keyword">return</span> backtrack(stones, sum, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 前index数组，分为两个子序列，返回这两个子序列之差的最小值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">backtrack</span><span class="params">(<span class="type">int</span>[] stone, <span class="type">int</span> sum, <span class="type">int</span> currentSum, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="comment">// 递归结束条件</span></span><br><span class="line">        <span class="comment">// 返回index结尾的子数组 分为的两个子序列之差</span></span><br><span class="line">        <span class="keyword">if</span> (index &gt;= stone.length) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">otherSum</span> <span class="operator">=</span> sum - currentSum;</span><br><span class="line">            <span class="keyword">return</span> Math.abs(otherSum - currentSum);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 递，两条路径，选择index，或不选择index</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">include</span> <span class="operator">=</span> backtrack(stone, sum, currentSum + stone[index], index + <span class="number">1</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">exclude</span> <span class="operator">=</span> backtrack(stone, sum, currentSum, index + <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 归，返回选择index 和不选择 index 的最小值</span></span><br><span class="line">        <span class="keyword">return</span> Math.min(include, exclude);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="从index-length-1开始递归"><a href="#从index-length-1开始递归" class="headerlink" title="从index &#x3D; length - 1开始递归"></a>从index &#x3D; length - 1开始递归</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">// int min = Integer.MAX_VALUE;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lastStoneWeightII</span><span class="params">(<span class="type">int</span>[] stones)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (stones == <span class="literal">null</span> || stones.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> stone: stones) &#123;</span><br><span class="line">            sum += stone;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// **从length - 1 开始往下递归**</span></span><br><span class="line">        <span class="keyword">return</span> backtrack(stones, sum, <span class="number">0</span>, stones.length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 前index数组，分为两个子序列，返回这两个子序列之差的最小值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">backtrack</span><span class="params">(<span class="type">int</span>[] stone, <span class="type">int</span> sum, <span class="type">int</span> currentSum, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="comment">// 递归结束条件</span></span><br><span class="line">        <span class="comment">// 返回index结尾的子数组 分为的两个子序列之差</span></span><br><span class="line">        <span class="keyword">if</span> (index == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">otherSum</span> <span class="operator">=</span> sum - currentSum;</span><br><span class="line">            <span class="keyword">return</span> Math.abs(otherSum - currentSum);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 递，两条路径，选择index，或不选择index</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">include</span> <span class="operator">=</span> backtrack(stone, sum, currentSum + stone[index], index - <span class="number">1</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">exclude</span> <span class="operator">=</span> backtrack(stone, sum, currentSum, index - <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 归，返回选择index 和不选择 index 的最小值</span></span><br><span class="line">        <span class="keyword">return</span> Math.min(include, exclude);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-记忆化数组"><a href="#3-记忆化数组" class="headerlink" title="3. 记忆化数组"></a>3. 记忆化数组</h3><ul>
<li>注意：memo要定义成一个二维数组，而不能定义成<code>int[] memo = new int[len + 1];</code> 因为index不能唯一的确定一种状态，只有<ul>
<li>index：确定当前已经递归到哪个元素</li>
<li>currentSum：index之前的元素选择情况<br>  才能唯一的确定一种状态。</li>
</ul>
</li>
<li>可以看出，此时memo数组和dp的形式已经很像了，<code>memo[i][j]</code>表示的是以i结尾的子数组，分为两个子序列，这两个子序列差值的最小值</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">// int min = Integer.MAX_VALUE;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lastStoneWeightII</span><span class="params">(<span class="type">int</span>[] stones)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (stones == <span class="literal">null</span> || stones.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> stone: stones) &#123;</span><br><span class="line">            sum += stone;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> stones.length;</span><br><span class="line">        <span class="type">int</span>[][] memo = <span class="keyword">new</span> <span class="title class_">int</span>[len + <span class="number">1</span>][sum + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; memo.length; i ++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; memo[<span class="number">0</span>].length; j ++) &#123;</span><br><span class="line">                memo[i][j] = -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> backtrack(stones, sum, <span class="number">0</span>, stones.length - <span class="number">1</span>, memo);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 前index数组，分为两个子序列，返回这两个子序列之差的最小值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">backtrack</span><span class="params">(<span class="type">int</span>[] stone, <span class="type">int</span> sum, <span class="type">int</span> currentSum, <span class="type">int</span> index, <span class="type">int</span>[][] memo)</span> &#123;</span><br><span class="line">        <span class="comment">// 递归结束条件</span></span><br><span class="line">        <span class="comment">// 返回index结尾的子数组 分为的两个子序列之差</span></span><br><span class="line">        <span class="keyword">if</span> (index == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">otherSum</span> <span class="operator">=</span> sum - currentSum;</span><br><span class="line">            <span class="keyword">return</span> Math.abs(otherSum - currentSum);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (memo[index][currentSum] != -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> memo[index][currentSum];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 递，两条路径，选择index，或不选择index</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">include</span> <span class="operator">=</span> backtrack(stone, sum, currentSum + stone[index], index - <span class="number">1</span>, memo);</span><br><span class="line">        <span class="type">int</span> <span class="variable">exclude</span> <span class="operator">=</span> backtrack(stone, sum, currentSum, index - <span class="number">1</span>, memo);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 归，返回选择index 和不选择 index 的最小值</span></span><br><span class="line">        memo[index][currentSum] = Math.min(include, exclude);</span><br><span class="line">        <span class="keyword">return</span> Math.min(include, exclude);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>dp</p>
<ol>
<li>**<code>dp</code> 定义：<ul>
<li><code>dp[i][j]</code> 表示前 <code>i</code> 个石头能否组成重量 <code>j</code>。</li>
</ul>
</li>
<li>​<strong>​初始化​</strong>​：<ul>
<li><code>dp[0][0] = true</code>（空子集可以组成重量 0）。</li>
<li>其他 <code>dp[0][j]</code> 默认为 <code>false</code>（Java 中布尔数组初始值为 <code>false</code>）。</li>
</ul>
</li>
<li>​<strong>​正确的状态转移​</strong>​：<ul>
<li>如果不选第 <code>i</code> 个石头，继承 <code>dp[i-1][j]</code>。</li>
<li>如果选第 <code>i</code> 个石头，检查 <code>dp[i-1][j - stones[i-1]]</code> 是否为 <code>true</code>。</li>
</ul>
</li>
<li>​<strong>​计算最终结果​</strong>​：<ul>
<li>从 <code>target</code> 反向遍历，找到最大的 <code>j</code> 使得 <code>dp[stones.length][j] = true</code>。</li>
<li>最小差值为 <code>sum - 2 * j</code>。</li>
</ul>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">// int min = Integer.MAX_VALUE;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lastStoneWeightII</span><span class="params">(<span class="type">int</span>[] stones)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (stones == <span class="literal">null</span> || stones.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> stone: stones) &#123;</span><br><span class="line">            sum += stone;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> stones.length;</span><br><span class="line">        <span class="comment">// dp[i][j]定义： 以i结尾的子数组，是否可以组成重量j</span></span><br><span class="line">        <span class="type">boolean</span>[][] dp = <span class="keyword">new</span> <span class="title class_">boolean</span>[len + <span class="number">1</span>][sum + <span class="number">1</span>];</span><br><span class="line">        <span class="comment">// init, 前0个石头可以组成重量0</span></span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// 状态转移</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= len; i ++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt;= sum; j ++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (stones[i - <span class="number">1</span>] &lt;= j) &#123;</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j] || dp[i - <span class="number">1</span>][j - stones[i - <span class="number">1</span>]];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j];</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">target</span> <span class="operator">=</span> sum / <span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxSubSet</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 找到离target最近的j</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> target; j &gt;= <span class="number">0</span>; j --) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dp[len][j] == <span class="literal">true</span>) &#123;</span><br><span class="line">                maxSubSet = j;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">         <span class="keyword">return</span> sum - <span class="number">2</span> * maxSubSet;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>一开始的思路是将dp定义成： <code>dp[i][j]</code> 为 ​<strong>​“以 <code>i</code> 结尾的子数组，分为两个子序列，这两个子序列差值的最小值”​</strong><br>不可以直接定义 <code>dp[i][j]</code> 为 ​<strong>​“以 <code>i</code> 结尾的子数组，分为两个子序列，这两个子序列差值的最小值”​</strong>​。原因如下：</p>
<ol>
<li><p>​<strong>​问题目标不匹配​</strong>​：</p>
<ul>
<li>我们需要的是 ​<strong>​全局最优解​</strong>​（整个数组分成两堆的最小差值），而不是 ​<strong>​以 <code>i</code> 结尾的子数组的局部最优解​</strong>​。</li>
<li>子问题的定义必须能递推到全局问题，而 <code>dp[i][j]</code> 的当前定义无法直接关联到最终的最小差值。</li>
</ul>
</li>
<li><p>​<strong>​状态转移难以设计​</strong>​：</p>
<ul>
<li>如果 <code>dp[i][j]</code> 表示以 <code>i</code> 结尾的子数组的最小差值，我们无法直接从 <code>dp[i-1][...]</code> 推导出 <code>dp[i][j]</code>，因为：<ul>
<li>新加入的石头 <code>stones[i]</code> 可以放入第一堆或第二堆，但差值的变化无法直接用 <code>dp[i-1][...]</code> 表示。</li>
<li>无法通过简单的 <code>Math.min</code> 或 <code>Math.max</code> 更新状态。</li>
</ul>
</li>
</ul>
</li>
<li><p>​<strong>​正确的 DP 定义​</strong>​：</p>
<ul>
<li>更合理的方式是 ​<strong>​将问题转化为背包问题​</strong>​：<ul>
<li><code>dp[i][j]</code> 表示 ​<strong>​前 <code>i</code> 个石头能否组成重量 <code>j</code>​</strong>​。</li>
<li>最终目标是找到最大的 <code>j &lt;= sum / 2</code> 使得 <code>dp[n][j] = true</code>，然后返回 <code>sum - 2 * j</code>。</li>
</ul>
</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>算法</tag>
        <tag>动态规划</tag>
        <tag>背包</tag>
        <tag>0/1 背包</tag>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title>汉明距离</title>
    <url>/2025/06/07/%E6%B1%89%E6%98%8E%E8%B7%9D%E7%A6%BB/</url>
    <content><![CDATA[<blockquote>
<blockquote>
<p>位运算基础题</p>
</blockquote>
</blockquote>
<h3 id="1-java支持的位运算："><a href="#1-java支持的位运算：" class="headerlink" title="1. java支持的位运算："></a>1. java支持的位运算：</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&amp;：按位与。 同1为1，否则为0</span><br><span class="line"></span><br><span class="line">|：按位或。 只要有一个为1，就是1</span><br><span class="line"></span><br><span class="line">~：按位非。 取反</span><br><span class="line"></span><br><span class="line">^：按位异或。 相同为0，不同为1</span><br><span class="line"></span><br><span class="line">&lt;&lt;：左位移运算符。</span><br><span class="line">&gt;&gt; ：右位移运算符。</span><br><span class="line"></span><br><span class="line">&lt;&lt;&lt;：无符号右移运算符。</span><br></pre></td></tr></table></figure>

<h3 id="2-工具函数"><a href="#2-工具函数" class="headerlink" title="2. 工具函数"></a>2. 工具函数</h3><p>lowbit函数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int lowbit(int x) &#123; </span><br><span class="line">	return x &amp; -x; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>​<strong>​输入​</strong>​：任意整数 <code>x</code>（正、负均可）。</li>
<li>​<strong>​输出​</strong>​：<code>x</code> 的二进制表示中​<strong>​最低位的 1 及其后所有 0​</strong>​组成的数。</li>
</ul>
<h4 id="应用场景："><a href="#应用场景：" class="headerlink" title="应用场景："></a>应用场景：</h4><h5 id="1-统计二进制中-1-的个数​-​"><a href="#1-统计二进制中-1-的个数​-​" class="headerlink" title="1. 统计二进制中 1 的个数​**​"></a>1. 统计二进制中 1 的个数​**​</h5><p>通过循环减去 <code>lowbit(x)</code> 直到 <code>x</code> 为 0，统计操作次数即为 1 的个数：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hammingDistance</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">	<span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> x ^ y;</span><br><span class="line">	<span class="keyword">while</span> (tmp &gt; <span class="number">0</span>) &#123;</span><br><span class="line">		tmp -= lowbit(tmp);</span><br><span class="line">		ans ++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">lowbit</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> x &amp; -x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="2-​​树状数组（Fenwick-Tree）​​"><a href="#2-​​树状数组（Fenwick-Tree）​​" class="headerlink" title="2. ​​树状数组（Fenwick Tree）​​"></a>2. ​<strong>​树状数组（Fenwick Tree）​</strong>​</h5><ul>
<li><code>lowbit</code> 用于快速定位树状数组中需要更新或查询的节点。例如：</li>
<li>​<strong>​单点更新​</strong>​：从当前位置 <code>i</code> 开始，不断加上 <code>lowbit(i)</code>，直到超出数组范围。</li>
<li>​<strong>​前缀和查询​</strong>​：从当前位置 <code>i</code> 开始，不断减去 <code>lowbit(i)</code>，累加对应节点的值。</li>
</ul>
<h5 id="3-其他应用​-​"><a href="#3-其他应用​-​" class="headerlink" title="3. 其他应用​**​"></a>3. 其他应用​**​</h5><ul>
<li>​<strong>​判断 2 的幂​</strong>​：若 <code>lowbit(x) == x</code>，则 <code>x</code> 是 2 的幂（如 <code>x=8</code> 的二进制为 <code>1000</code>）。</li>
<li>​<strong>​区间合并与离散化​</strong>​：在算法题中用于快速处理区间边界（如 AcWing 802. 区间和问题）。</li>
</ul>
<h4 id="while-x-y-0-作用"><a href="#while-x-y-0-作用" class="headerlink" title="while ((x | y) !&#x3D; 0) 作用"></a>while ((x | y) !&#x3D; 0) 作用</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hammingDistance</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> ((x | y) != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> x &amp; <span class="number">1</span>, b = y &amp; <span class="number">1</span>;</span><br><span class="line">            ans += a ^ b;</span><br><span class="line">            x &gt;&gt;= <span class="number">1</span>; y &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>while ((x | y) != 0)</code> 的作用:<br>确保循环处理 <code>x</code> 和 <code>y</code> 的​<strong>​所有二进制位​</strong>​，直到所有位都被右移出（即 <code>x</code> 和 <code>y</code> 均变为 0）。</p>
<p>按位或运算的特性​​</p>
<ul>
<li>​<strong>​<code>x | y</code>​</strong>​ 会对 <code>x</code> 和 <code>y</code> 的每一位执行逻辑或操作：<ul>
<li>若 <code>x</code> 或 <code>y</code> 的某一位为 1，结果的该位为 1。</li>
<li>仅当 <code>x</code> 和 <code>y</code> 的所有位均为 0 时，结果才为 0。</li>
</ul>
</li>
<li>​<strong>​循环终止条件​</strong>​：当 <code>x</code> 和 <code>y</code> 的所有位均处理完毕（即均为 0）时，循环结束。</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>股票买卖问题-历史学习记录归档</title>
    <url>/2025/06/08/%E8%82%A1%E7%A5%A8%E4%B9%B0%E5%8D%96%E9%97%AE%E9%A2%98-%E5%8E%86%E5%8F%B2%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%E5%BD%92%E6%A1%A3/</url>
    <content><![CDATA[<h1 id="股票买卖问题总结"><a href="#股票买卖问题总结" class="headerlink" title="股票买卖问题总结"></a>股票买卖问题总结</h1><h2 id="题号"><a href="#题号" class="headerlink" title="题号"></a>题号</h2><p>121<br>122<br>123<br>188<br>309<br>714  </p>
<h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><ol>
<li>状态有三个：i表示是第几天，k表示当前可用的交易次数，0 or 1 分别表示现在手中没有持有或者持有股票</li>
<li>定义dp数组：   <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> prices.length;</span><br><span class="line"><span class="type">int</span>[][][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[len][k][<span class="number">2</span>];</span><br></pre></td></tr></table></figure></li>
<li>base case: <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">dp[-<span class="number">1</span>][k][<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line"><span class="comment">//解释：因为 i 是从 0 开始的，所以 i = -1 意味着还没有开始，这时候的利润当然是 0 。</span></span><br><span class="line">dp[-<span class="number">1</span>][k][<span class="number">1</span>] = -infinity</span><br><span class="line"><span class="comment">//解释：还没开始的时候，是不可能持有股票的，用负无穷表示这种不可能。</span></span><br><span class="line">dp[i][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line"><span class="comment">//解释：因为 k 是从 1 开始的，所以 k = 0 意味着根本不允许交易，这时候利润当然是 0 。</span></span><br><span class="line">dp[i][<span class="number">0</span>][<span class="number">1</span>] = -infinity</span><br><span class="line"><span class="comment">//解释：不允许交易的情况下，是不可能持有股票的，用负无穷表示这种不可能。</span></span><br></pre></td></tr></table></figure></li>
<li>状态转移方程：   <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; len; i ++)&#123;</span><br><span class="line">    <span class="comment">//解释：今天我没有持有股票，有两种可能：</span></span><br><span class="line">    <span class="comment">//要么是我昨天就没有持有，然后今天选择 rest，所以我今天还是没有持有；</span></span><br><span class="line">    <span class="comment">//要么是我昨天持有股票，但是今天我 sell 了，所以我今天没有持有股票了。</span></span><br><span class="line">    dp[i][k][<span class="number">0</span>] = Math.max(</span><br><span class="line">        <span class="comment">// 昨天就没有股票</span></span><br><span class="line">        dp[i - <span class="number">1</span>][k][<span class="number">0</span>],</span><br><span class="line">        <span class="comment">//  昨天有股票，今天卖了</span></span><br><span class="line">        dp[i - <span class="number">1</span>][k][<span class="number">1</span>] + prices[i]</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">//解释：今天我持有着股票，有两种可能：</span></span><br><span class="line">    <span class="comment">//要么我昨天就持有着股票，然后今天选择 rest，所以我今天还持有着股票；</span></span><br><span class="line">    <span class="comment">//要么我昨天本没有持有，但今天我选择 buy，所以今天我就持有股票了。</span></span><br><span class="line">    dp[i][k][<span class="number">1</span>] = Math.max(</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        dp[i - <span class="number">1</span>][k][<span class="number">1</span>],</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        dp[i - <span class="number">1</span>][k - <span class="number">1</span>][<span class="number">0</span>] - prices[i]</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="k-1"><a href="#k-1" class="headerlink" title="k &#x3D; 1"></a>k &#x3D; 1</h2><blockquote>
<p>k &#x3D; 1 和 k &#x3D; inf 不同的地方在于k &#x3D; 1时 状态转移方程中的k和k-1是不一样的，而k&#x3D;inf时，k 和 k - 1可以认为一样；</p>
</blockquote>
<ol>
<li>化简模板中的状态转移方程  </li>
<li>用化简后的状态转移方程和模板中的base case 推出 初始条件：    <pre><code class="language-java">dp[i][k][0] = Math.max(dp[i - 1][k][0], dp[i - 1][k][1] + prices[i])
因为k为定值1
dp[0][0] = 0;
dp[0][1] = - prices[0];
</code></pre>
</li>
</ol>
<h2 id="k-inf"><a href="#k-inf" class="headerlink" title="k &#x3D; inf"></a>k &#x3D; inf</h2><ol>
<li>化简模板中的状态转移方程<pre><code class="language-java">dp[i][k][0] = max(dp[i-1][k][0], dp[i-1][k][1] + prices[i])
dp[i][k][1] = max(dp[i-1][k][1], dp[i-1][k-1][0] - prices[i])
            = max(dp[i-1][k][1], dp[i-1][k][0] - prices[i])

我们发现数组中的 k 已经不会改变了，也就是说不需要记录 k 这个状态了：
dp[i][0] = max(dp[i-1][0], dp[i-1][1] + prices[i])
dp[i][1] = max(dp[i-1][1], dp[i-1][0] - prices[i])
</code></pre>
</li>
<li>根据化简后的状态转移方程和base case推初始条件：<br> dp[0][0] &#x3D; 0;<br> dp[0][1] &#x3D; - prices[0];</li>
</ol>
<blockquote>
<p>总结就是先根据题意，化简模板中的状态转移方程，然后根据化简后的状态转移方程，推base case；就这么简单</p>
</blockquote>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>历史学习记录</tag>
        <tag>leetcode</tag>
        <tag>算法</tag>
        <tag>动态规划</tag>
        <tag>dp</tag>
      </tags>
  </entry>
</search>
